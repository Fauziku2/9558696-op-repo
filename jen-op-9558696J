pipeline {
  agent any

  stages {
    stage('Op-9558696J-S1: Backup and Update QA') {
      steps {
        sh '''
        #!/bin/bash

        # Remove old QA backup image if exists
        docker image rm -f qa-bkup-image || true

        # Backup current QA container
        docker commit 9558696j-qa-svr qa-bkup-image

        # Create necessary directory
        mkdir -p /tmp/operate/9558696J

        # Ensure /tmp/operate/9558696J is clean and usable
        puppet resource file /tmp/operate/9558696J ensure=absent force=true
        puppet resource file /tmp/operate/9558696J ensure=directory

        # Clone the repo
        cd /tmp/operate/9558696J
        git clone https://github.com/Fauziku2/9558696J-op-repo.git

        # Locate and run the bolt script
        locate_script='/tmp/operate/9558696J/9558696J-op-repo/9558696J_script'
        bolt script run $locate_script -t 9558696j-qa-svr.localdomain -u clientadm -p user123 --no-host-key-check --run-as root --no-tty
        '''
      }
    }

    stage('Op-9558696J-S2: curl test on QA') {
      steps {
        # sh '''#!/bin/bash
        # curl -Is http://localhost:33200 | head -n 1 > /tmp/qa-result-file
        # def qaStatus = sh(script: "grep 'HTTP/1.1 200 OK' /tmp/qa-result-file", returnStatus: true)
        # result=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:32700/index.html)
        # echo "QA curl response: {qaStatus}"
        # '''
        curl -Is http://localhost:33200 | head -n 1 > /tmp/qa-result-file
        def qaStatus = sh(script: "grep 'HTTP/1.1 200 OK' /tmp/qa-result-file", returnStatus: true)
        echo "QA curl response: {qaStatus}"
      }
    }

    stage('Op-9558696J-S3: Rollout or Rollback?') {
      steps {
        script {
          def decision = input message: 'Proceed to Production deployment or Rollback?', ok: 'Continue',
                         parameters: [choice(name: 'ACTION', choices: ['Proceed', 'Rollback'], description: 'Choose your next step')]
          if (decision == 'Rollback') {
            sh '''#!/bin/bash
            # Stop and Remove current QA container
            docker stop 9558696j-qa-svr || true
            docker rm 9558696j-qa-svr || true

            # Create new QA container from backup image
            docker run -dit --name 9558696j-qa-svr --hostname=9558696j-qa-svr.localdomain --net customnetwork --ip 192.168.100.110 -p 33200:80 qa-bkup-image /bin/bash

            # Give the container time to initialise
            sleep 5

            # Install and start SSH inside container
            docker exec 9558696j-qa-svr bash -c "apt-get update && apt-get install -y openssh-server && service ssh start && service apache2 start"
            '''
            error("Op-9558696J-S3: QA server fails after update and is rolled back")
          }
        }
      }
    }

    stage('Op-9558696J-S4: Backup and Update Prod') {
      steps {
        sh '''#!/bin/bash
        # Remove old Prod backup image if exists
        docker image rm -f prod-bkup-image || true

        # Backup current Prod container
        docker commit 9558696j-prod-svr prod-bkup-image

        # Reuse updated code from QA stage
        puppet resource file /tmp/operate/9558696J ensure=absent force=true
        puppet resource file /tmp/operate/9558696J ensure=directory
        cd /tmp/operate/9558696J
        git clone https://github.com/Fauziku2/9558696J-op-repo.git
        locate_script='/tmp/operate/9558696J/9558696J-op-repo/9558696J_script'
        bolt script run $locate_script -t 9558696j-prod-svr.localdomain -u clientadm -p user123 --no-host-key-check --run-as root
        '''
        echo 'Op-9558696J-S4: Prod web server is backup and updated'
      }
    }

    stage('Op-9558696J-S5: curl test on Prod') {
      steps {
        sh '''#!/bin/bash
        result=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:32701/index.html)
        echo "Prod curl response: $result"
        '''
      }
    }

    stage('Op-9558696J-S6: Final rollback decision') {
      steps {
        script {
          def decision = input message: 'Is the Prod version working fine?', ok: 'Continue',
                         parameters: [choice(name: 'ACTION', choices: ['All Good', 'Rollback'], description: 'Final decision')]
          if (decision == 'Rollback') {
            sh '''#!/bin/bash
            docker stop 9558696j-prod-svr
            docker rm 9558696j-prod-svr
            docker run -d -p 32701:80 --name 9558696j-prod-svr qa-bkup-image
            '''
            echo 'Op-9558696J-S6: Rollback to QA image done'
          } else {
            echo 'Op-9558696J-S6: Production version confirmed successful'
          }
        }
      }
    }

    stage('Op-9558696J-S7: Monitor') {
      steps {
        echo 'Op-9558696J-S7: Prod web server is monitored and ready to serve.'
      }
    }
  }
}
