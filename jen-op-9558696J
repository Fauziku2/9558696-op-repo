pipeline {
  agent any

   environment {
    // QA Config
    QA_CONTAINER = "9558696j-qa-svr"
    QA_IMAGE_BKUP = "qa-bkup-image"
    QA_HOSTNAME = "9558696j-qa-svr.localdomain"
    QA_PORT = "33200"
    QA_IP = "192.168.100.110"

    // Prod Config
    PROD_CONTAINER = "9558696j-prod-svr"
    PROD_IMAGE_BKUP = "prod-bkup-image"
    PROD_HOSTNAME = "9558696j-prod-svr.localdomain"
    PROD_PORT = "33500"
    PROD_IP = "192.168.100.220"

    // Git and Bolt
    GIT_REPO = "https://github.com/Fauziku2/9558696J-op-repo.git"
    SCRIPT_PATH = "/tmp/operate/9558696J/9558696J-op-repo/9558696J_script"
    OPERATE_DIR = "/tmp/operate/9558696J"
    SSH_USER = "clientadm"
    SSH_PASS = "user123"
  }

  stages {
    stage('Op-9558696J-S1') {
      steps {
        sh '''
        #!/bin/bash

        # Remove old QA backup image if exists
        docker image rm -f $QA_IMAGE_BKUP || true

        # Backup current QA container
        docker commit $QA_CONTAINER $QA_IMAGE_BKUP

        # Create necessary directory
        mkdir -p $OPERATE_DIR

        # Ensure /tmp/operate/9558696J is clean and usable
        puppet resource file $OPERATE_DIR ensure=absent force=true
        puppet resource file $OPERATE_DIR ensure=directory

        # Clone the repo
        cd $OPERATE_DIR
        git clone $GIT_REPO

        # Locate and run the bolt script
        bolt script run $SCRIPT_PATH -t $QA_HOSTNAME -u $SSH_USER -p $SSH_PASS --no-host-key-check --run-as root --no-tty
        '''
        echo 'Op-9558696J-S1: QA web server is backup and updated'
      }
    }

    stage('Op-9558696J-S2') {
      steps {
        sh """#!/bin/bash
        curl -Is http://localhost:$QA_PORT | head -n 1 > /tmp/qa-result-file
        grep 'HTTP/1.1 200 OK' /tmp/qa-result-file || { echo "QA test failed"; exit 1; }
        """
        echo 'Op-9558696J-S2: Checking on whether QA server is running after update'
      }
    }

    stage('Op-9558696J-S3') {
      steps {
        script {
          def decision = input message: 'Proceed to Production deployment or Rollback?', ok: 'Continue',
                         parameters: [choice(name: 'ACTION', choices: ['Proceed to Roll out to Prod server', 'Roll back QA server'], description: 'Choose your next step')]
          if (decision == 'Roll back QA server') {
            sh '''#!/bin/bash
            # Stop and Remove current QA container
            docker stop $QA_CONTAINER || true
            docker rm $QA_CONTAINER || true

            # Create new QA container from backup image
            docker run -dit --name $QA_CONTAINER --hostname=$QA_HOSTNAME --net customnetwork --ip $QA_IP -p $QA_PORT:80 $QA_IMAGE_BKUP /bin/bash

            # Give the container time to initialise
            sleep 5

            # Install and start SSH inside container
            docker exec $QA_CONTAINER bash -c "apt-get update && apt-get install -y openssh-server && service ssh start && service apache2 start"
            '''
            echo 'Op-9558696J-S3: QA server fails after update and is rolled back'
            error('Aborting')
          } else {
            echo 'Op-9558696J-S3: Proceed to roll out to Prod server'
          }
        }
      }
    }

    stage('Op-9558696J-S4') {
      steps {
        sh '''#!/bin/bash
        # Remove old Prod backup image if exists
        docker image rm -f $PROD_IMAGE_BKUP || true

        # Backup current Prod container
        docker commit $PROD_CONTAINER $PROD_IMAGE_BKUP

        # Reuse updated code from QA stage
        puppet resource file $OPERATE_DIR ensure=absent force=true
        puppet resource file $OPERATE_DIR ensure=directory
        cd $OPERATE_DIR
        git clone $GIT_REPO
        bolt script run $SCRIPT_PATH -t $PROD_HOSTNAME -u $SSH_USER -p $SSH_PASS --no-host-key-check --run-as root
        '''
        echo 'Op-9558696J-S4: Prod web server is backup and updated'
      }
    }

    stage('Op-9558696J-S5') {
      steps {
        sh '''#!/bin/bash
        curl -Is http://localhost:$PROD_PORT | head -n 1 > /tmp/prod-result-file
        grep 'HTTP/1.1 200 OK' /tmp/prod-result-file || { echo "Prod test failed"; exit 1; }
        '''
        echo 'Op-9558696J-S5: Checking on whether Prod server is running after update'
      }
    }

    stage('Op-9558696J-S6') {
      steps {
        script {
          def decision = input message: 'Is the Prod version working fine?', ok: 'Continue',
                         parameters: [choice(name: 'ACTION', choices: ['Proceed to release Prod web server to production', 'Roll back Prod web server'], description: 'Final decision')]
          if (decision == 'Roll back Prod web server') {
            sh '''#!/bin/bash
            # Stop and Remove current Prod container
            docker stop $PROD_CONTAINER || true
            docker rm $PROD_CONTAINER || true

            # Create new QA container from backup image
            docker run -dit --name $PROD_CONTAINER --hostname=$PROD_HOSTNAME --net customnetwork --ip $PROD_IP -p $PROD_PORT:80 $PROD_IMAGE_BKUP /bin/bash

            # Give the container time to initialise
            sleep 5

            # Install and start SSH inside container
            docker exec $PROD_CONTAINER bash -c "apt-get update && apt-get install -y openssh-server && service ssh start && service apache2 start"
            '''
            echo 'Op-9558696J-S6: Prod web server is rolled back'
            error('Aborting')
          } else {
            echo 'Op-9558696J-S6: Proceed to release Prod web server to production'
          }
        }
      }
    }

    stage('Op-9558696J-S7') {
      steps {
        echo 'Op-9558696J-S7: Prod web server is monitored and ready to serve.'
      }
    }
  }
}
